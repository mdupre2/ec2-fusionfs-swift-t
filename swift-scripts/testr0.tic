
# Generated by stc version 0.6.0
# date                    : 2015/08/10 20:48:14
# Turbine version         : 0.6.0
# Input filename          : /home/mermer/Dropbox/MyDocs/BigDataX/work/ec2-swift-t/testr.swift
# Output filename         : /home/mermer/Dropbox/MyDocs/BigDataX/work/ec2-swift-t/testr0.tic
# STC home                : /home/mermer/bigdata/swift-t/exm-install/stc
# Turbine home            : /home/mermer/bigdata/swift-t/exm-install/turbine
# Compiler settings:
# stc.auto-declare              : true
# stc.c_preprocess              : true
# stc.checkpointing             : true
# stc.compiler-debug            : true
# stc.debugging                 : COMMENTS
# stc.ic.output-file            : 
# stc.input_filename            : testr.swift
# stc.log.file                  : 
# stc.log.trace                 : false
# stc.must_pass_wait_vars       : true
# stc.opt.algebra               : true
# stc.opt.array-build           : true
# stc.opt.batch-refcounts       : true
# stc.opt.cancel-refcounts      : true
# stc.opt.constant-fold         : true
# stc.opt.controlflow-fusion    : true
# stc.opt.dataflow-op-inline    : true
# stc.opt.dead-code-elim        : true
# stc.opt.demote-globals        : true
# stc.opt.disable-asserts       : false
# stc.opt.expand-loop-threshold-insts: 256
# stc.opt.expand-loop-threshold-iters: 16
# stc.opt.expand-loops          : false
# stc.opt.finalized-var         : true
# stc.opt.flatten-nested        : true
# stc.opt.full-function-inline  : false
# stc.opt.full-unroll           : false
# stc.opt.function-always-inline-threshold: 5
# stc.opt.function-inline       : true
# stc.opt.function-inline-threshold: 50
# stc.opt.function-signature    : true
# stc.opt.hoist                 : true
# stc.opt.hoist-refcounts       : true
# stc.opt.loop-simplify         : true
# stc.opt.max-iterations        : 10
# stc.opt.merge-refcounts       : true
# stc.opt.piggyback-refcounts   : true
# stc.opt.pipeline              : false
# stc.opt.propagate-aliases     : true
# stc.opt.reorder-insts         : false
# stc.opt.shared-constants      : true
# stc.opt.unroll-loop-threshold-insts: 192
# stc.opt.unroll-loop-threshold-iters: 8
# stc.opt.unroll-loops          : true
# stc.opt.value-number          : true
# stc.opt.wait-coalesce         : true
# stc.output_filename           : testr0.tic
# stc.preproc.force-cpp         : false
# stc.preproc.force-gcc         : false
# stc.preprocess_only           : false
# stc.profile                   : false
# stc.refcounting               : true
# stc.rpath                     : 
# stc.stc_home                  : /home/mermer/bigdata/swift-t/exm-install/stc
# stc.turbine.version           : 0.6.0
# stc.turbine_home              : /home/mermer/bigdata/swift-t/exm-install/turbine
# stc.version                   : 0.6.0

# Metadata:
# Arg nfiles                    : 64
# Arg optnum                    : 0

package require turbine 0.6.0
namespace import turbine::*


proc swift:constants {  } {
    turbine::c::log "function:swift:constants"
}


proc swift:main {  } {
    turbine::c::log "enter function: __entry"
    # Var: string[int] u:s RENAMED [string[int]:s] testr.swift:main():45:8
    lassign [ adlb::multicreate [ list container integer string 2 1 1 ] ] u:s
    turbine::c::log "allocated u:s=<${u:s}>"
    turbine::rule [ list ${u:s} ] "main-foreach-wait1 ${u:s}"
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 "main-forloop-1 1 0 ${u:s}"
    turbine::reset_priority
}


proc main-foreach-wait1 { u:s } {
    set tcltmp:container_sz [ adlb::enumerate ${u:s} count all 0 ]
    set tcltmp:iters ${tcltmp:container_sz}
    turbine::read_refcount_incr ${u:s} [ expr { ${tcltmp:iters} - 1 } ]
    main-foreach1:outer ${u:s} 0 [ expr { ${tcltmp:container_sz} - 1 } ] 1
}


proc main-foreach1:outer { u:s tcltmp:lo tcltmp:hi tcltmp:inc } {
    if { [ expr { ${tcltmp:lo} > ${tcltmp:hi} } ] } {
        return
    }
    while {1} {
        set tcltmp:itersleft [ expr { max(0,(${tcltmp:hi} - ${tcltmp:lo}) / ${tcltmp:inc} + 1) } ]
        if { [ expr { ${tcltmp:itersleft} <= 64 } ] } {
            main-foreach1:inner ${u:s} ${tcltmp:lo} ${tcltmp:hi} ${tcltmp:inc}
            return
        } else {
            set tcltmp:skip [ expr { ${tcltmp:inc} * max(64,((${tcltmp:itersleft} - 1) / 16) + 1) } ]
            for { set tcltmp:splitstart [ expr { ${tcltmp:lo} + ${tcltmp:skip} } ] } { ${tcltmp:splitstart} <= ${tcltmp:hi} } { incr tcltmp:splitstart ${tcltmp:skip} } {
                set tcltmp:splitend [ expr { min(${tcltmp:hi},${tcltmp:splitstart} + ${tcltmp:skip} - 1) } ]
                set tcltmp:prio [ turbine::get_priority ]
                turbine::set_priority ${tcltmp:prio}
                adlb::spawn 0 "main-foreach1:outer ${u:s} ${tcltmp:splitstart} ${tcltmp:splitend} ${tcltmp:inc}"
                turbine::reset_priority
            }
            set tcltmp:hi [ expr { ${tcltmp:lo} + ${tcltmp:skip} - 1 } ]
        }
    }
}


proc main-foreach1:inner { u:s tcltmp:lo tcltmp:hi tcltmp:inc } {
    set tcltmp:splitlen [ expr { ${tcltmp:hi} - ${tcltmp:lo} + 1 } ]
    set tcltmp:contents [ adlb::enumerate ${u:s} dict ${tcltmp:splitlen} ${tcltmp:lo} ]
    dict for {v:index v:f} ${tcltmp:contents} {
        set tcltmp:prio [ turbine::get_priority ]
        turbine::set_priority ${tcltmp:prio}
        adlb::spawn 0 [ list readtest-app-leaf1 ${v:f} ${v:index} ]
        turbine::reset_priority
    }
    set tcltmp:iters [ expr { max(0,(${tcltmp:hi} - ${tcltmp:lo}) / ${tcltmp:inc} + 1) } ]
    turbine::read_refcount_decr ${u:s} [ expr { ${tcltmp:iters} } ]
}


proc readtest-app-leaf1 { v:f v:index } {
    turbine::c::log [ list exec: "/mnt/swift-run/read-test.sh" ${v:f} ${v:index} [ dict create ] ]
    turbine::exec_external "/mnt/swift-run/read-test.sh" [ dict create ] ${v:f} ${v:index}
}


proc main-forloop-1 { v:xcond:1 v:i:3 u:s } {
    set t:loopcond 1
    while {${t:loopcond}} {
        if { ${v:xcond:1} } {
            # Var: $int v:t:13 VALUE_OF [int:__t:13]
            # Var: $string v:filename:1 VALUE_OF [string:filename]
            # Var: $boolean v:t:15:1 VALUE_OF [boolean:__t:15]
            set v:t:13 [ expr { ${v:i:3} + 1 } ]
            set v:filename:1 "/mnt/script/fusion_mount/file-${v:i:3}"
            set v:t:15:1 [ expr { ${v:t:13} < 64 } ]
            set nextiter:v:xcond:1 ${v:t:15:1}
            set nextiter:v:i:3 ${v:t:13}
            turbine::container_insert ${u:s} ${v:i:3} ${v:filename:1} string 0
        } else {
            set t:loopcond 0
            turbine::read_refcount_decr ${u:s} 1
            adlb::write_refcount_decr ${u:s} 1
        }
        if { ${t:loopcond} } {
            set v:xcond:1 ${nextiter:v:xcond:1}
            set v:i:3 ${nextiter:v:i:3}
        }
    }
}

turbine::defaults
turbine::declare_custom_work_types COASTER
turbine::init $servers "Swift"
turbine::enable_read_refcount
adlb::declare_struct_type 16 s:location [ list "rank" integer "strictness" string "accuracy" string ]
turbine::check_constants "WORKER\[WORKER\]" ${turbine::WORK_TASK} 0 "CONTROL" ${turbine::WORK_TASK} 0 "ADLB_RANK_ANY" ${adlb::RANK_ANY} -100
turbine::argv_add_constant "nfiles" "64"
turbine::argv_add_constant "optnum" "0"
adlb::add_debug_symbol 1 "s" "testr:main():45:8"
turbine::start swift:main swift:constants
turbine::finalize
